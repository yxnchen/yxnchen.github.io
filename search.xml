<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker部署ShareLaTeX并简单配置中文环境</title>
      <link href="/technique/Docker%E9%83%A8%E7%BD%B2ShareLaTeX%E5%B9%B6%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E7%8E%AF%E5%A2%83/"/>
      <url>/technique/Docker%E9%83%A8%E7%BD%B2ShareLaTeX%E5%B9%B6%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gh-io-1257470807.cos.ap-guangzhou.myqcloud.com/sharelatex.png" alt=""></p><blockquote><p>由于某些原因，国内访问ShareLaTeX或Overleaf网站速度特别慢而且经常掉线，科研环境十分不友好，因此有了自己搭建ShareLaTeX服务打算，且其支持Docker容器化部署，安装过程比较容易。本文记录了在实验室内网环境下利用Docker搭建ShareLaTeX服务的过程，并进行中文环境配置。</p></blockquote><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>系统与Docker环境安装同上篇<a href="https://yxnchen.github.io/technique/Docker%E9%83%A8%E7%BD%B2GitLab%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/">Docker部署GitLab并实现基本配置</a>，然后继续按照<a href="https://legacy.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener">教程</a>安装<code>docker-compose</code>组件。</p><h1 id="安装并配置ShareLaTeX"><a href="#安装并配置ShareLaTeX" class="headerlink" title="安装并配置ShareLaTeX"></a>安装并配置ShareLaTeX</h1><blockquote><p>由于ShareLaTeX的安装依赖于MongoDB和Redis，因此本文将使用官方向导建议使用<code>docker-compose</code>快速部署ShareLaTeX</p></blockquote><ul><li><p>拉取最新的ShareLaTeX镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull sharelatex/sharelatex</span><br></pre></td></tr></table></figure></li><li><p>下载<code>docker-compose.yml</code>文件，并进行配置，见<a href="https://github.com/sharelatex/sharelatex/wiki/Quick-Start-Guide#using-a-compose-file" target="_blank" rel="noopener">Quick Start Guide</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p ~/sharelatex          <span class="comment"># 在用户目录下创建一个sharelatex文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/sharelatex                <span class="comment"># 进入sharelatex文件夹</span></span><br><span class="line">$ curl -O https://raw.githubusercontent.com/sharelatex/sharelatex/master/docker-compose.yml                      <span class="comment"># 下载官方的docker-compose.yml配置文件</span></span><br><span class="line">$ sudo vi docker-compose.yml     <span class="comment"># 使用vi修改配置文件</span></span><br></pre></td></tr></table></figure></li><li><p>需要配置的项</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 避免端口重复</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">5000</span><span class="string">:80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改本地挂载目录</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/home/docker/sharelatex:/var/lib/sharelatex</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加升级texlive需要的环境变量，主要是添加2018目录到2017前面，目的是为了防止后面安装完整版texlive时出现错误</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">PATH:</span> <span class="string">/usr/localsbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/texlive/2018/bin/x86_64-linux:/usr/local/texlive/2017/bin/x86_64-linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面选项设置ShareLaTeX的显示样式</span></span><br><span class="line"><span class="attr">SHARELATEX_APP_NAME:</span> <span class="string">Our</span> <span class="string">ShareLaTeX</span></span><br><span class="line"><span class="attr">SHARELATEX_NAV_TITLE:</span> <span class="string">Our</span> <span class="string">ShareLaTeX</span> <span class="string">Instance</span></span><br><span class="line"><span class="attr">SHARELATEX_HEADER_IMAGE_URL:</span> <span class="attr">http://somewhere.com/mylogo.png</span></span><br><span class="line"><span class="attr">SHARELATEX_LEFT_FOOTER:</span> <span class="string">'[&#123;"text": "Powered by &lt;a href=\"https://www.sharelatex.com\"&gt;ShareLaTeX&lt;/a&gt; 2016"&#125;,&#123;"text": "Another page I want to link to can be found &lt;a href=\"here\"&gt;here&lt;/a&gt;"&#125; ]'</span></span><br><span class="line"><span class="attr">SHARELATEX_RIGHT_FOOTER:</span> <span class="string">'[&#123;"text": "Hello I am on the Right"&#125; ]'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改mongo和redis的本地挂载目录</span></span><br><span class="line"><span class="comment"># mongo</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/home/docker/mongo_data:/data/db</span></span><br><span class="line"><span class="comment"># redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/home/docker/redis_data:/data</span></span><br></pre></td></tr></table></figure></li><li><p>创建并运行ShareLaTeX容器，启动后不要着急进入网站</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在sharelatex目录下</span></span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>升级并安装完整版texlive，<a href="https://www.tug.org/texlive/upgrade.html" target="_blank" rel="noopener">官方教程</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器的命令行（sharelatex容器本质上是一个Ubuntu）</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it sharelatex bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入texlive默认安装目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/texlive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制2017文件夹为2018</span></span><br><span class="line">$ cp -a 2017 2018</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并运行升级脚本</span></span><br><span class="line">$ wget http://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh</span><br><span class="line">$ sh update-tlmgr-latest.sh -- --upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换texlive的下载源，例如国内的清华源</span></span><br><span class="line">$ tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级tlmgr</span></span><br><span class="line">$ tlmgr update --self --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新字体缓存（好像没成功，但是不影响下面操作）</span></span><br><span class="line">$ luaotfload-tool -fu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完整版texlive（漫长的等待，不要让shell断开）</span></span><br><span class="line">$ tlmgr install scheme-full</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推出sharelatex的命令行界面，并重启sharelatex容器</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ docker restart sharelatex</span><br></pre></td></tr></table></figure></li><li><p>使用ShareLaTeX</p><p>进入浏览器访问<code>http://192.168.8.21:5000/launchpad</code>，根据提示创建Admin用户。</p></li></ul><h1 id="配置中文写作环境"><a href="#配置中文写作环境" class="headerlink" title="配置中文写作环境"></a>配置中文写作环境</h1><blockquote><p>下载的sharelatex镜像里面默认是没有安装xfont和中文字体的，因此无法渲染中文文档，必须安装所需的中文字体，这里以Windows下常用字体和Adobe Song Std为例。原教程见<a href="https://blog.csdn.net/hello_percy/article/details/72147414" target="_blank" rel="noopener">ArchLinux 部署ShareLaTex并且配置中文支持</a>。</p></blockquote><ul><li><p>将Windows字体库（即目录<code>C:\windows\fonts</code>）上传到host机，如果Windows安装了Git可以使用<code>scp</code>命令直接上传</p></li><li><p>在host机下把<code>fonts</code>目录打包并传到sharelatex容器中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入fonts目录</span></span><br><span class="line">$ <span class="built_in">cd</span> fonts/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除其中的.fon字体文件（该种格式文件在后面建立字体目录时会报错），只保留TrueType和OpenType字体，即.ttf和.otf</span></span><br><span class="line"><span class="comment"># 一般地，如果只需要其中特定的中文字体，只需要上传需要的字体即可</span></span><br><span class="line">$ rm -r *.fon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回上层目录并打包</span></span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ tar -zcvf winfonts.tar.gz fonts/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把压缩文件传到sharelatex容器的root目录下</span></span><br><span class="line">$ docker cp winfonts.tar.gz sharelatex:/root</span><br></pre></td></tr></table></figure></li><li><p>在容器中安装Windows字体</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器的命令行界面</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it sharelatex bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过安装wqy字体同时安装xfont工具</span></span><br><span class="line">$ apt-get install xfonts-wqy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入root目录，解压winfonts.tar.gz，并剪切到系统字体目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ tar -zxvf winfonts.tar.gz</span><br><span class="line">$ mv winfonts /usr/share/fonts/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入字体目录安装字体</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/share/fonts/winfonts</span><br><span class="line">$ mkfontscale</span><br><span class="line">$ mkfontdir</span><br><span class="line">$ <span class="built_in">fc</span>-cache -fv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查确认中文字体安装成功</span></span><br><span class="line">$ <span class="built_in">fc</span>-list :lang=zh-cn</span><br></pre></td></tr></table></figure></li><li><p>回到ShareLaTeX网站，创建一个新项目，使用$C\TeX$宏集和XeLaTeX编译器，即可生成中文pdf。（详见<a href="http://mirrors.ibiblio.org/CTAN/language/chinese/ctex/ctex.pdf" target="_blank" rel="noopener">$C\TeX$宏集手册</a>）</p></li><li><p>因为学校论文的需要，有时需要其他中文字体，例如Adobe宋体，其安装流程与上述基本一致。（PS：在GitHub上可以找到公开的Adobe Song Std字体，涉及版权这里不放链接）</p></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/sofair/article/details/80994960" target="_blank" rel="noopener">在本地部署ShareLatex服务</a></li><li><a href="https://haoyu.love/blog640.html" target="_blank" rel="noopener">本地部署 ShareLatex</a></li><li><a href="https://blog.csdn.net/hello_percy/article/details/72147414" target="_blank" rel="noopener">ArchLinux 部署ShareLaTex并且配置中文支持</a></li><li><a href="https://www.scaleway.com/docs/installing-sharelatex-ubuntu/" target="_blank" rel="noopener">Installing ShareLaTeX</a></li><li><a href="https://github.com/sharelatex/sharelatex/wiki/Quick-Start-Guide" target="_blank" rel="noopener">Quick Start Guide</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> technique </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> ShareLaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署GitLab并实现基本配置</title>
      <link href="/technique/Docker%E9%83%A8%E7%BD%B2GitLab%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/technique/Docker%E9%83%A8%E7%BD%B2GitLab%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gh-io-1257470807.cos.ap-guangzhou.myqcloud.com/docker-build-push-gitlab-ci.png" alt=""></p><blockquote><p>本地GitLab的安装需要部署各种依赖和其他服务，费时且麻烦，而直接使用Docker进行容器化部署则省时简单，只要运行一行命令即可使用。本文记录了在实验室内网环境下利用Docker搭建源码托管工具GitLab，并列出一些必要的个性化配置项。</p></blockquote><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>由于Ubuntu系统在Docker环境下兼容性更高，选择了 <code>Ubuntu 18.04 LTS</code> 作为操作系统环境。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>Docker环境的安装十分简单，在这里不详述，根据<a href="https://legacy.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener">Docker —— 从入门到实践</a>选择对应操作系统的安装教程即可。</p><h2 id="安装GitLab-ce"><a href="#安装GitLab-ce" class="headerlink" title="安装GitLab-ce"></a>安装GitLab-ce</h2><blockquote><p>GitLab的安装可以直接<code>run</code>，或者通过<code>docker-compose</code>文件指定安装流程，这里使用前者进行快速简单安装，后者后续更新。</p></blockquote><ul><li><p>拉取GitLab-ce镜像，查看镜像信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull gitlab/gitlab-ce</span><br><span class="line">$ docker image ls</span><br></pre></td></tr></table></figure></li><li><p>创建并启动一个GitLab容器，<code>:</code>后的内容不要修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ GITLAB_HOME = /home/docker/gitlab     <span class="comment"># 建立gitlab本地目录</span></span><br><span class="line">$ docker run -d \</span><br><span class="line">--hostname gitlab.example.com\          <span class="comment"># 指定容器域名,创建镜像仓库用</span></span><br><span class="line">-p 8443:443 \                           <span class="comment"># 容器443端口映射到主机8443端口(https)</span></span><br><span class="line">-p 8080:80 \                            <span class="comment"># 容器80端口映射到主机8080端口(http)</span></span><br><span class="line">-p 2222:22 \                            <span class="comment"># 容器22端口映射到主机2222端口(ssh)</span></span><br><span class="line">--name gitlab \                         <span class="comment"># 容器名称</span></span><br><span class="line">--restart always \                      <span class="comment"># 容器退出后自动重启</span></span><br><span class="line">-v <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab \    <span class="comment"># 挂载本地目录到容器配置目录</span></span><br><span class="line">-v <span class="variable">$GITLAB_HOME</span>/logs:/var/<span class="built_in">log</span>/gitlab \  <span class="comment"># 挂载本地目录到容器日志目录</span></span><br><span class="line">-v <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab \  <span class="comment"># 挂载本地目录到容器数据目录</span></span><br><span class="line">gitlab/gitlab-ce:latest                 <span class="comment"># 使用的镜像:版本</span></span><br></pre></td></tr></table></figure></li><li><p>查看容器运行情况，出现gitlab运行信息表明启动成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container ls</span><br></pre></td></tr></table></figure></li><li><p>浏览器进入<code>http://192.168.8.21:8080</code>，使用<code>root</code>账户登录并设置密码即可进入管理员界面</p></li></ul><h2 id="配置GitLab"><a href="#配置GitLab" class="headerlink" title="配置GitLab"></a>配置GitLab</h2><blockquote><p>可参考官方配置说明<a href="https://docs.gitlab.com/omnibus/settings/configuration.html" target="_blank" rel="noopener">文档</a>，本地配置文件在<code>$GITLAB_HOME/config/gitlab.rb</code></p></blockquote><h3 id="备份默认配置文件"><a href="#备份默认配置文件" class="headerlink" title="备份默认配置文件"></a>备份默认配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/docker/gitlab/config</span><br><span class="line">$ cp gitlab.rb gitlab.rb.default</span><br></pre></td></tr></table></figure><h3 id="修改与重载配置"><a href="#修改与重载配置" class="headerlink" title="修改与重载配置"></a>修改与重载配置</h3><ul><li><p>修改配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vi /home/docker/gitlab/config</span><br></pre></td></tr></table></figure></li><li><p>重载配置</p><p>在gitlab容器内重载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -t gitlab gitlab-ctl reconfigure</span><br><span class="line">$ docker <span class="built_in">exec</span> -t gitlab gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>或直接重启容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker restart gitlab</span><br></pre></td></tr></table></figure></li></ul><h3 id="常用配置选项"><a href="#常用配置选项" class="headerlink" title="常用配置选项"></a>常用配置选项</h3><ul><li><p>配置web请求地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">external_url &apos;http://192.168.8.21&apos;</span><br></pre></td></tr></table></figure></li><li><p>设置时区</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab_rails[&apos;time_zone&apos;] = &apos;Asia/Shanghai&apos;</span><br></pre></td></tr></table></figure></li><li><p>允许自定义头像，去掉注释<code>#</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab_rails[&apos;gravatar_plain_url&apos;] = &apos;http://www.gravatar.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&apos;</span><br></pre></td></tr></table></figure></li><li><p>由于设置了端口映射，设置如下选项使得网页端显示正常可用的ssh地址，如“ssh://git@192.168.8.21:2222/xxx/xxx.git”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2222</span><br></pre></td></tr></table></figure></li><li><p>在实验室内网环境下，关闭GitLab的CI/CD功能，详细见<a href="https://docs.gitlab.com/ce/ci/enable_or_disable_ci.html" target="_blank" rel="noopener">官方说明</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab_rails[&apos;gitlab_default_projects_features_builds&apos;] = false</span><br></pre></td></tr></table></figure></li><li><p>设置GitLab备份路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab_rails[&apos;manage_backup_path&apos;] = true</span><br><span class="line">gitlab_rails[&apos;backup_path&apos;] = &quot;/var/opt/gitlab/backups&quot;</span><br></pre></td></tr></table></figure></li><li><p>配置邮箱服务，可以参考<a href="http://blog.51cto.com/8456082/2090423" target="_blank" rel="noopener">连接</a></p></li><li><p>添加SSL证书支持HTTPS，可以参考<a href="https://blog.csdn.net/u014258541/article/details/79224492/" target="_blank" rel="noopener">连接</a>，由于使用自签名证书Chrome会拦截，所以没有弄</p></li></ul><h2 id="更新GitLab"><a href="#更新GitLab" class="headerlink" title="更新GitLab"></a>更新GitLab</h2><ul><li><p>拉取最新的GitLab-ce镜像，然后停止并删除当前的GitLab容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker stop gitlab</span><br><span class="line">$ docker rm gitlab</span><br></pre></td></tr></table></figure></li><li><p>重启创建并启动GitLab容器，使用同样的配置和volume参数即可，GitLab会自动读取这些配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">--hostname gitlab.example.com\</span><br><span class="line">-p 8443:443 \ </span><br><span class="line">-p 8080:80 \ </span><br><span class="line">-p 2222:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">-v <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab \</span><br><span class="line">-v <span class="variable">$GITLAB_HOME</span>/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">-v <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab \</span><br><span class="line">gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="http://blog.51cto.com/8456082/2090423" target="_blank" rel="noopener">通过docker安装Gitlab</a></li><li><a href="https://www.cnblogs.com/int32bit/p/5310382.html" target="_blank" rel="noopener">使用Docker部署Gitlab</a></li><li><a href="https://blog.csdn.net/u014258541/article/details/79224492/" target="_blank" rel="noopener">docker部署gitLab</a></li><li><a href="https://docs.gitlab.com/ce/ci/enable_or_disable_ci.html" target="_blank" rel="noopener">How to enable or disable GitLab CI/CD</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> technique </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贝叶斯泊松分解变分推断笔记</title>
      <link href="/research/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%B3%8A%E6%9D%BE%E5%88%86%E8%A7%A3%E5%8F%98%E5%88%86%E6%8E%A8%E6%96%AD%E7%AC%94%E8%AE%B0/"/>
      <url>/research/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%B3%8A%E6%9D%BE%E5%88%86%E8%A7%A3%E5%8F%98%E5%88%86%E6%8E%A8%E6%96%AD%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="贝叶斯泊松分解"><a href="#贝叶斯泊松分解" class="headerlink" title="贝叶斯泊松分解"></a>贝叶斯泊松分解</h2><h3 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h3><p>因为可以对观测数据进行灵活的符合实际的建模（不同的概率分布假设），贝叶斯概率分解模型已经成为了最常见的矩阵/张量分解方法。其中，贝叶斯泊松分解模型一方面可以对计数值（count data）进行有效的建模，另一方面得益于其非负的分解结构，可以用于替代传统的非负矩阵分解模型（NMF），因而被广泛应用于推荐系统、因子分析和聚类分析中。常见的贝叶斯泊松矩阵分解模型如下，其中观测值$x_{ij}$服从泊松分布，而其分解得到的因子矩阵的值则服从共轭的Gamma分布：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}&x_{ij}=\sum_{k=1}^{K}z_{ijk}, z_{ijk}\sim\text{Pois}(u_{ik}v_{jk}), \\&u_{ik}\sim\text{Gamma}(a^{(u)},\frac{b^{(u)}}{a^{(u)}}),\\&v_{jk}\sim\text{Gamma}(a^{(v)},\frac{b^{(v)}}{a^{(v)}}).\\\end{split}\end{equation}</script><a id="more"></a><p>其中Gamma分布的概率密度函数如下所示，$\alpha\in\mathbb{R}_{+}$为shape参数，$\beta\in\mathbb{R}_{+}$为scale参数，$\Gamma(n+1)=n!$为gamma函数：</p><script type="math/tex; mode=display">\begin{equation}\text{Gamma}(x;\alpha,\beta)=\text{exp}\left((\alpha-1)\text{ln}x-\frac{x}{\beta}-\text{ln}\Gamma(\alpha)-\alpha\text{ln}\beta\right)\end{equation}</script><h3 id="Binary形式"><a href="#Binary形式" class="headerlink" title="Binary形式"></a>Binary形式</h3><h2 id="变分推断"><a href="#变分推断" class="headerlink" title="变分推断"></a>变分推断</h2><h3 id="变分更新公式"><a href="#变分更新公式" class="headerlink" title="变分更新公式"></a>变分更新公式</h3><p>上述模型的联合概率分布函数为</p><script type="math/tex; mode=display">\begin{equation}p(X,Z,U,V)=p(X\mid Z)p(Z\mid U,V)p(U)p(V)\end{equation}</script><p>其对数形式展开如下</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\text{ln}p(X,Z,U,V)=&\sum_{i}\sum_{j}\sum_{k}\left(-u_{ik}v_{jk}+z_{ijk}\text{ln}(u_{ik}v_{jk})-\text{ln}\Gamma(z_{ijk}+1)\right) \\&+\sum_{i}\sum_{j}\left((a^{(u)}-1)\text{ln}u_{ik}-\frac{a^{(u)}}{b^{(u)}}u_{ik}-\text{ln}\Gamma(a^{(u)})-a^{(u)}\text{ln}\frac{b^{(u)}}{a^{(u)}}\right) \\&+\sum_{i}\sum_{j}\left((a^{(v)}-1)\text{ln}v_{jk}-\frac{a^{(v)}}{b^{(v)}}v_{jk}-\text{ln}\Gamma(a^{(v)})-a^{(v)}\text{ln}\frac{b^{(v)}}{a^{(v)}}\right) \\\end{split}\end{equation}</script><p>与此同时，对后验概率分布的变分近似分布进行分解，得到</p><script type="math/tex; mode=display">\begin{equation}\begin{split}q(Z,U,V)&=q(Z)q(U)q(V) \\&=\prod_{i,j}q_{\boldsymbol{z}_{ij}}(\boldsymbol{z}_{ij})\prod_{i,k}q_{u_{ik}}(u_{ik})\prod_{j,k}q_{v_{jk}}(v_{jk})\end{split}\end{equation}</script><p>根据<a href="https://yxnchen.github.io/machine-learning/%E5%8F%98%E5%88%86%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%8E%A8%E6%96%AD%E7%AC%94%E8%AE%B0/">变分贝叶斯推断笔记</a>中的公式(3)，我们可以对各个因子的最优化形式进行推导。首先，对于因子$q_{\boldsymbol{z}_{ij}}(\boldsymbol{z}_{ij})$，有</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\text{ln}q_{\boldsymbol{z}_{ij}}^{*}(\boldsymbol{z}_{ij})&=\mathbb{E}_{(\Theta\backslash \boldsymbol{z}_{ij})}[\text{ln}p(X,Z,U,V)]+\text{const} \\&=\mathbb{E}_{(\Theta\backslash \boldsymbol{z}_{ij})}\left[\sum_{k}\left(-\text{ln}\Gamma(z_{ijk}+1)+z_{ijk}\left(\text{ln}u_{ik}+\text{ln}v_{jk}\right)\right)\right]+\text{const} \\&=\sum_{k}\left(-\text{ln}\Gamma(z_{ijk}+1)+z_{ijk}\left(\mathbb{E}[\text{ln}u_{ik}]+\mathbb{E}[\text{ln}v_{jk}]\right)\right)+\text{const} \\&=\sum_{k}\left(-\text{ln}\Gamma(z_{ijk}+1)+z_{ijk}\text{ln}e^{\mathbb{E}[\text{ln}u_{ik}]+\mathbb{E}[\text{ln}v_{jk}]}\right)+\text{const} \\\end{split}\end{equation}</script><p>辅助变量$\boldsymbol{z}_{ij}$的后验为多项式分布，其参数为</p><script type="math/tex; mode=display">\begin{equation}\phi_{ijk}^{*}=\frac{e^{\mathbb{E}[\text{ln}u_{ik}]+\mathbb{E}[\text{ln}v_{jk}]}}{\sum_{k}e^{\mathbb{E}[\text{ln}u_{ik}]+\mathbb{E}[\text{ln}v_{jk}]}}\end{equation}</script><p>因此$z_{ijk}$的更新公式为</p><script type="math/tex; mode=display">\begin{equation}\mathbb{E}[z_{ijk}]=x_{ij}\phi_{ijk}^{*}\end{equation}</script><p>进一步地，对于因子$q_{u_{ik}}(u_{ik})$，有</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\text{ln}q_{u_{ik}}^{*}(u_{ik})&=\mathbb{E}_{(\Theta\backslash u_{ik})}[\text{ln}p(X,Z,U,V)]+\text{const} \\&=\mathbb{E}_{(\Theta\backslash u_{ik})}\left[\left(a^{(u)}+\sum_{j}z_{ijk}-1\right)\text{ln}u_{ik}-\left(\frac{a^{(u)}}{b^{(u)}}+\sum_{k}v_{jk}\right)u_{ik}\right]+\text{const} \\&=\left(a^{(u)}+\sum_{j}\mathbb{E}[z_{ijk}]-1\right)\text{ln}u_{ik}-\left(\frac{a^{(u)}}{b^{(u)}}+\sum_{k}\mathbb{E}[v_{jk}]\right)u_{ik}+\text{const} \\\end{split}\end{equation}</script><p>由共轭性，$q_{u_{ik}}(u_{ik})$仍然是Gamma分布，其参数为</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\alpha_{ik}^{(u)*}&=a^{(u)}+\sum_{j}\mathbb{E}[z_{ijk}],\\\beta_{ik}^{(u)*}&=\left(\frac{a^{(u)}}{b^{(u)}}+\sum_{k}\mathbb{E}[v_{jk}]\right)^{-1},\\\end{split}\end{equation}</script><p>因此$u_{ik}$的更新公式为</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\mathbb{E}[u_{ik}]&=\alpha_{ik}^{(u)*}\beta_{ik}^{(u)*} \\\mathbb{E}[\text{ln}u_{ik}]&=\psi(\alpha_{ik}^{(u)*})+\text{ln}\beta_{ik}^{(u)*}\end{split}\end{equation}</script><p>最后，因子$q_{v_{jk}}(v_{jk})$的计算与因子$q_{u_{ik}}(u_{ik})$类似。</p><h3 id="变分下界计算"><a href="#变分下界计算" class="headerlink" title="变分下界计算"></a>变分下界计算</h3><p>变分下界的计算公式如下：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\mathcal{L}(q)&=\mathbb{E}_{q}[\text{ln}p(X,\Theta)]+H(q(\Theta))\end{split}\end{equation}</script><p>其中$H(q(\Theta))=-\mathbb{E}_{q}[\text{ln}q(\Theta)]$，因此我们可以计算变分下界，其中$\sum_{i}\sum_{j}\sum_{k}\mathbb{E}\left[\text{ln}\Gamma(z_{ijk}+1)\right]$项可以在计算过程中消去</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\mathcal{L}(q)=&-\sum_{i}\sum_{j}\sum_{k}\mathbb{E}[u_{ik}]\mathbb{E}[v_{jk}] \\&+\sum_{i}\sum_{k}\mathbb{E}[\text{ln}u_{ik}]\left(a^{(u)}-1+\sum_{j}\mathbb{E}[z_{ijk}]\right) \\&+\sum_{j}\sum_{k}\mathbb{E}[\text{ln}v_{jk}]\left(a^{(v)}-1+\sum_{i}\mathbb{E}[z_{ijk}]\right) \\&+\sum_{i}\sum_{k}\left(-\frac{a^{(u)}}{b^{(u)}}\mathbb{E}[u_{ik}]-\text{ln}\Gamma(a^{(u)})-a^{(u)}\text{ln}\frac{b^{(u)}}{a^{(u)}}\right) \\&+\sum_{j}\sum_{k}\left(-\frac{a^{(v)}}{b^{(v)}}\mathbb{E}[v_{jk}]-\text{ln}\Gamma(a^{(v)})-a^{(v)}\text{ln}\frac{b^{(v)}}{a^{(v)}}\right) \\&+\sum_{i}\sum_{j}\left(-\text{ln}\Gamma(x_{ij}+1)-\sum_{k}\mathbb{E}[z_{ijk}]\text{ln}\phi_{ijk}^{*}\right) \\&+\sum_{i}\sum_{k}\left(-(\alpha_{ik}^{(u)*}-1)\psi(\alpha_{ik}^{(u)*})+\text{ln}\beta_{ik}^{(u)*}+\alpha_{ik}^{(u)*}+\text{ln}\Gamma(\alpha_{ik}^{(u)*})\right) \\&+\sum_{j}\sum_{k}\left(-(\alpha_{jk}^{(v)*}-1)\psi(\alpha_{jk}^{(v)*})+\text{ln}\beta_{jk}^{(v)*}+\alpha_{jk}^{(v)*}+\text{ln}\Gamma(\alpha_{jk}^{(v)*})\right) \\\end{split}\end{equation}</script><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>Prem Gopalan, Jake M. Hofman, David M. Blei. “Scalable recommendation with hierarchical poisson factorization”. In <em>UAI</em>, 2015.</li></ol>]]></content>
      
      
      <categories>
          
          <category> research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Bayesian </tag>
            
            <tag> Variational Inference </tag>
            
        </tags>
      
    </entry>
    
    
    
    
  
  
</search>
